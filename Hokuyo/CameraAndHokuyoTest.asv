%% Testing Hokuyo
clc;
disp('=========SL_ZED_WITH_MATLAB -- Point Cloud=========');

if exist('hokuyo', 'var')
    fclose(hokuyo);
end
close all;
clear mex; clear functions; clear all;


mexZED('create');
hokuyo = utmOpen('192.168.0.10');

player = pcplayer([-5000 5000],[-5000 5000],[-5000 5000]);
% Define Scan Parameters
InitParameters.camera_resolution = 2; %HD720
InitParameters.camera_fps = 60;
InitParameters.system_units = 2; %METER
InitParameters.depth_mode =  1; %PERFORMANCE
InitParameters.coordinate_system = 3; %COORDINATE_SYSTEM_RIGHT_HANDED_Z_UP

% DepthClamp value
depth_max = 5;
% Step for mesh display
data_Step = 10;

%Hokuyo resolution
res = 0.25;

for j = 1:5
    %get hokyuo scan
    [scan, timestamp] = utmGetScan(hokuyo, 0, 1080);
    angle = linspace(-135, 135, length(scan)) .* pi/180;
    angleVector=((res*0:res:1080*res)-135)'.*pi/180;
    rangeVector=scan;
    pointsHokuyo = [rangeVector.*cos(angleVector), rangeVector.*sin(angleVector), zeros(size(rangeVector))];
    % get camera scan
    [pt_X, pt_Y, pt_Z] = mexZED('retrieveMeasure', 3, requested_mesh_size(1), requested_mesh_size(2)); %XYZ pointcloud
    % PointClouds
    ptCloudHokuoyo = pointCloud(pointsHokuyo);
    ptCloudZed = pointCloud(
    
    denoised = pcdenoise(ptCloudHokuoyo);
    downsampled = pcdownsample(ptCloudHokuoyo,'gridAverage',25);
    %downsampled = ptCloud;
    % view(player, downsampled);
    
    % diff to previous cloud
    if j > 1
        figure(1)

        plot (downsampled.Location(:,1),downsampled.Location(:,2),'k.');
        hold on;
        plot (old_downsampled.Location(:,1),old_downsampled.Location(:,2),'r.');
        transform = pcregrigid(downsampled, old_downsampled,'Extrapolate',true);
        pos(j,:) = transform.T' * pos(j-1,:)';
        pause(0.1);
        
    end
    old_downsampled = denoised;
end
fclose(hokuyo);
disp('the end')
